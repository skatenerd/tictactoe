#!/usr/bin/python

def print_board(board):
    for rw in board:
        print_row(rw)

def print_row(row):
    print ("|"+"|".join([num_to_avatar(n) for n in row])+"|")

def num_to_avatar(n):
    if n==-1:
        return "X"
    elif n==0:
        return "_"
    elif n==1:
        return "O"
    else:
        raise ValueError("The board contains numbers outside {-1,0,1}")

def is_number(s):
    try:
        n=int(s)
    except ValueError:
        return False
    return True

def groom_raw_move(move_str):
    casted_to_tuple=tuple([int(i) for i in move_str if is_number(i)])
    if len(casted_to_tuple)==2:
        #this is the good case
        return casted_to_tuple
    else:
        return None


def prompt_move(input_str):
    raw_move=raw_input(input_str)
    return groom_raw_move(raw_move)

def is_valid_move(move,board):
    rtnval=False
    if move:
        input_row=move[0]
        input_col=move[1]
        legal_idx_range=set(range(-1,2))
        coordinates_within_bounds=input_row in legal_idx_range and input_col in legal_idx_range
        if coordinates_within_bounds:
            spot_unoccupied=board[input_row][input_col]==0
            if spot_unoccupied:
                rtnval=True
    return rtnval


def get_valid_move(board):
    #prompt for initial input
    move_tuple=prompt_move("Please enter your move\n")
    while not is_valid_move(move_tuple,board):
        move_tuple=prompt_move("Previous move was in an occupied spot or off the board, try again\n")
    return move_tuple


if __name__=="__main__":
    dummy_board=[range(-1,2) for x in range(3)]
    #print_board(dummy_board)
    print get_valid_move(dummy_board)

